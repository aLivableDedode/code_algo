package otherclassicpro;

/**
 *  @博弈问题
 *  你和你的朋友面前有一排石头堆，用一个数组 piles 表示，piles[i] 表示第 i 堆石子有多少个。
 *  你们轮流拿石头，一次拿一堆，但是只能拿走最左边或者最右边的石头堆。
 *  所有石头被拿完后，谁拥有的石头多，谁获胜。
 *
 * 石头的堆数可以是任意正整数，石头的总数也可以是任意正整数，这样就能打破先手必胜的局面了。
 * 比如有三堆石头 piles = [1,100,3]，先手不管拿 1 还是 3，
 * 能够决定胜负的 100 都会被后手拿走，后手会获胜。
 *
 * @【假设两人都很聪明，请你设计一个算法，返回先手和后手的最后得分（石头总数）之差。】
 * 比如上面那个例子，先手能获得 4 分，后手会获得 100 分，你的算法应该返回 -96
 *
 * @博弈问题的难点在于，两个人要轮流进行选择，而且都贼精明，应该如何编程表示这个过程呢？
 * 针对一个nums[i~j]的数组 想要得到最优解按照动态规划的思路：每次选择都是最大的值
 * 另外分别成先手fir、后手sec
 * @--》dp[i][j].fir 表示，对于 piles[i...j] 这部分石头堆，先手能获得的最高分数。
 * @--》dp[i][j].sec 表示，对于 piles[i...j] 这部分石头堆，后手能获得的最高分数。
 *
 * 想求的答案是先手和后手最终分数之差，
 * 按照这个定义也就是 dp[0][n-1].fir - dp[0][n-1].sec，
 * 即面对整个 piles，先手的最优得分和后手的最优得分之差。
 *
 *
 */
public class GameProblem {

    public static void main(String[] args) {
        
    }
}
