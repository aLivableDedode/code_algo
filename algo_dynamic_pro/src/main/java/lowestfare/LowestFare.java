package lowestfare;

/**
 *  火车票有三种不同的销售方式：
 *
 *     一张为期一天的通行证售价为 costs[0] 美元；
 *     一张为期七天的通行证售价为 costs[1] 美元；
 *     一张为期三十天的通行证售价为 costs[2] 美元。
 *     通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
 *     返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。
 *
 *     输入：days = [1,4,6,7,8,20], costs = [2,7,15]
 *     输出：11
 *     解释：
 *     例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
 *     在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
 *     在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
 *     在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
 *     你总共花了 $11，并完成了你计划的每一天旅行。
 */
public class LowestFare {
    public static void main(String[] args) {

    }

    public static int mincostTickets(int[] days, int[] costs) {

        return 0;
    }

}
